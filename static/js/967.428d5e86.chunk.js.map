{"version":3,"file":"static/js/967.428d5e86.chunk.js","mappings":"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","sources":["features/canvas/thunks.ts","features/canvas/LoadingCanvas.tsx","features/canvas/Items.tsx","features/canvas/Canvas.tsx","features/canvas/Color.tsx","features/canvas/NameEdit.tsx","features/canvas/LineSize.tsx","features/canvas/index.tsx","pages/Draw.tsx","../../packages/lib/src/types/drawing.ts"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { Drawing } from '@root/lib'\nimport { RootState } from '../../shared/store'\nimport { notify, notifyError } from '../app'\nimport { get, Method, request } from '../app/thunks'\nimport { getCopy, getDraft } from './helpers'\nimport { actions } from './slice'\n\nexport const itemsAsync = createAsyncThunk(\n  'canvas/list',\n  async (_, { dispatch }) => {\n    const resp = await get<Drawing[]>(`/drawing`)\n    if (resp.status === 200) {\n      dispatch(actions.patch({ items: resp.data, loaded: true }))\n    }\n    return resp.data\n  }\n)\n\nexport const getAsync = createAsyncThunk(\n  'canvas/get',\n  async (id: string, { dispatch, getState }) => {\n    let active: Drawing | undefined\n    const state = getState() as RootState\n    const userId = state.app.user?.userId\n    active = state.canvas.items.find((i) => i.id === id)\n    if (!active) {\n      const resp = await get<Drawing>(`/drawing/${id}`)\n      if (resp.status === 404) {\n        dispatch(notifyError(`Drawing ${id} not found`))\n      }\n      const item = resp.data || getDraft()\n      const own = item.userId === userId\n      active = own ? item : getCopy(item)\n    }\n    dispatch(actions.patchActive(active as Drawing))\n    return active\n  }\n)\n\nexport const saveAsync = createAsyncThunk(\n  'canvas/save',\n  async ({ history, thumbnail }: Partial<Drawing>, { dispatch, getState }) => {\n    const state = getState() as RootState\n    const payload = {\n      ...state.canvas.active,\n      history,\n      thumbnail,\n    }\n\n    if (['draft', 'copy'].includes(payload.id as string)) {\n      payload.id = undefined\n    }\n\n    const response = await request<Drawing>('/drawing', payload)\n    if (response.status === 200) {\n      dispatch(actions.onSave(response.data))\n      dispatch(notify('Saved, scroll down to see'))\n    }\n    return response.data\n  }\n)\n\nexport const deleteAsync = createAsyncThunk(\n  'canvas/delete',\n  async (id: string, { dispatch, getState }) => {\n    const response = await request(`/drawing/${id}`, null, Method.DELETE)\n    if (response.status !== 200) {\n      return\n    }\n    const state = (getState() as RootState).canvas.items\n    const items = state.filter((item) => item.id !== id)\n    const active = items.find((item) => item.id === id) || getDraft()\n    dispatch(actions.patch({ items, active }))\n  }\n)\n","import CircularProgress from '@mui/material/CircularProgress'\nimport { useAppSelector } from '../../shared/store'\n\nexport default function LoadingCanvas() {\n  const loading = useAppSelector((store) => store.canvas.loading)\n  return (\n    <>\n      <CircularProgress\n        className={`${loading ? '' : 'invisible'}`}\n        sx={{ position: 'absolute', left: '50%', top: '50%' }}\n      />\n    </>\n  )\n}\n","import { Delete } from '@mui/icons-material'\nimport {\n  Button,\n  Container,\n  ContainerProps,\n  IconButton,\n  ImageList,\n  ImageListItem,\n  ImageListItemBar,\n  Paper,\n} from '@mui/material'\nimport { Drawing } from '@root/lib'\nimport React from 'react'\nimport { useCallback } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { Paths } from 'src/shared/routes'\nimport config from '../../shared/config'\nimport { useAppDispatch, useAppSelector } from '../../shared/store'\nimport { actions } from './slice'\nimport { deleteAsync, itemsAsync } from './thunks'\n\nexport default function Items(props: ContainerProps) {\n  const items = useAppSelector((store) => store.canvas.items)\n  const loaded = useAppSelector((store) => store.canvas.loaded)\n  const activeId = useAppSelector((store) => store.canvas.active?.id)\n  const dispatch = useAppDispatch()\n  const navigate = useNavigate()\n  const setItem = useCallback(\n    (item: Drawing) => dispatch(actions.patchActive(item)),\n    [dispatch]\n  )\n  const isActive = (item: Drawing) => activeId === item?.id\n  const { id } = useParams()\n\n  const deleteItem = async (item: Drawing) => {\n    const result = await dispatch(deleteAsync(item.id as string))\n    if (result.meta.requestStatus === 'fulfilled') {\n      if (id === item.id) {\n        navigate(Paths.Draw, { replace: true })\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    if (!loaded) {\n      dispatch(itemsAsync())\n    }\n  }, [dispatch, loaded])\n\n  return (\n    <Container maxWidth=\"xl\" {...props}>\n      <Paper variant=\"elevation\" sx={{ padding: '1rem' }}>\n        <ImageList>\n          {items.map((item) => (\n            <ImageListItem\n              key={item.id}\n              sx={{\n                border: `solid 1px ${\n                  isActive(item) ? '#ab47bc' : 'transparent'\n                }`,\n                borderWidth: '0 0 1px 0',\n                transition: 'all 200ms ease-in',\n              }}\n            >\n              <img\n                src={item.thumbnail}\n                alt={item.name}\n                loading=\"lazy\"\n                style={{\n                  backgroundColor: 'rgba(200, 163, 255, .1)',\n                  height: config.thumbnails.height,\n                  width: config.thumbnails.width,\n                }}\n                width={config.thumbnails.width}\n                height={config.thumbnails.height}\n              />\n              <ImageListItemBar\n                title={item.name}\n                actionIcon={\n                  <>\n                    <Button onClick={() => setItem(item)}>Edit</Button>\n                    <IconButton onClick={() => deleteItem(item)}>\n                      <Delete />\n                    </IconButton>\n                  </>\n                }\n              />\n            </ImageListItem>\n          ))}\n        </ImageList>\n      </Paper>\n    </Container>\n  )\n}\n","import React from 'react'\n\nimport { ActionType } from '@root/lib'\nimport { adjustToResolution, setBrushDefaults } from './helpers'\nimport { useAppSelector } from '../../shared/store'\nimport config from '../../shared/config'\n\nexport function Canvas({\n  canvasRef,\n  contextRef,\n  record,\n}: {\n  canvasRef: React.MutableRefObject<HTMLCanvasElement | null>\n  contextRef: React.MutableRefObject<CanvasRenderingContext2D | null>\n  record: (t: ActionType, x?: number, y?: number) => void\n}) {\n  const color = useAppSelector((state) => state.canvas.color)\n  const size = useAppSelector((state) => state.canvas.size)\n  const isDrawing = React.useRef<boolean>(false)\n\n  const draw = React.useCallback(\n    (offsetX: number, offsetY: number, hist = false) => {\n      if (!contextRef?.current) {\n        return\n      }\n      contextRef.current.lineTo(offsetX, offsetY)\n      contextRef.current.stroke()\n      if (!hist) {\n        record(ActionType.Stroke, offsetX, offsetY)\n      }\n    },\n    [contextRef, record]\n  )\n\n  const startDrawing = (offsetX: number, offsetY: number) => {\n    if (!contextRef.current || !canvasRef.current) {\n      return\n    }\n    contextRef.current.beginPath()\n    contextRef.current.lineTo(offsetX + 1, offsetY + 1)\n    contextRef.current.stroke()\n    if (color === 'transparent') {\n      contextRef.current.globalCompositeOperation = 'destination-out'\n    } else {\n      contextRef.current.globalCompositeOperation = 'source-over'\n      contextRef.current.strokeStyle = color || config.defaultColor\n    }\n    contextRef.current.lineWidth = size || config.defaultLineSize\n    isDrawing.current = true\n    canvasRef.current.style.cursor = 'crosshair'\n    record(ActionType.Open, offsetX + 1, offsetY + 1)\n  }\n\n  const finishDrawing = () => {\n    if (!contextRef.current || !canvasRef.current) {\n      return\n    }\n    contextRef.current.closePath()\n    isDrawing.current = false\n    canvasRef.current.style.cursor = 'default'\n    record(ActionType.Close)\n    if (!contextRef.current) {\n      return\n    }\n  }\n\n  //Events\n  const onMouseStart = ({ nativeEvent }: React.MouseEvent) => {\n    const { offsetX, offsetY } = nativeEvent\n    startDrawing(offsetX, offsetY)\n  }\n\n  const onMouseMove = ({ nativeEvent }: { nativeEvent: MouseEvent }) => {\n    if (!isDrawing.current || !contextRef?.current) {\n      return\n    }\n    const { offsetX, offsetY } = nativeEvent\n    draw(offsetX, offsetY)\n  }\n\n  const touchStart = (e: React.TouchEvent) => {\n    if (e.touches?.length > 1) return\n    const offsetX = e.touches[0].clientX\n    const offsetY = e.touches[0].clientY\n    startDrawing(offsetX, offsetY)\n  }\n\n  const touchMove = (e: React.TouchEvent) => {\n    if (e.touches?.length > 1) return\n    const offsetX = e.touches[0].clientX\n    const offsetY = e.touches[0].clientY\n    draw(offsetX, offsetY)\n  }\n\n  React.useEffect(() => {\n    const canvas = canvasRef.current\n    const context = canvas?.getContext('2d')\n    if (!canvas || !context) {\n      return\n    }\n    contextRef.current = context\n\n    setBrushDefaults(context)\n    adjustToResolution(canvas)\n\n    const handleResizing = () => {\n      adjustToResolution(canvas, true)\n    }\n    window.addEventListener('resize', handleResizing)\n    return () => window.removeEventListener('resize', () => handleResizing)\n  }, [canvasRef, contextRef])\n\n  return (\n    <canvas\n      style={{ flex: 1 }}\n      onTouchStart={touchStart}\n      onTouchMove={touchMove}\n      onTouchEnd={finishDrawing}\n      onMouseDown={onMouseStart}\n      onMouseUp={finishDrawing}\n      onMouseMove={onMouseMove}\n      ref={canvasRef}\n    />\n  )\n}\n","import React from 'react'\nimport { Backspace, Check } from '@mui/icons-material'\nimport { Box, BoxProps, Fab, Stack } from '@mui/material'\nimport { useAppDispatch, useAppSelector } from '../../shared/store'\nimport { actions } from './slice'\n\nconst colors = ['yellow', 'red', 'blue', 'green', 'black']\n\nexport default function Color(props: BoxProps) {\n  const dispatch = useAppDispatch()\n  const activeColor = useAppSelector((state) => state.canvas.color)\n  const [prev, setPrev] = React.useState<string | undefined>()\n  const isActive = (c: string) => activeColor === c\n  const setColor = (requested: string) => {\n    const color =\n      requested === 'transparent' && activeColor === 'transparent'\n        ? prev\n        : requested\n    dispatch(actions.patch({ color }))\n    setPrev(activeColor)\n  }\n\n  return (\n    <Box {...props}>\n      <Stack spacing={1}>\n        {colors.map((c) => (\n          <Fab\n            key={c}\n            sx={{\n              backgroundColor: c,\n            }}\n            onClick={() => setColor(c)}\n          >\n            {isActive(c) && <Check />}\n          </Fab>\n        ))}\n\n        <Fab title=\"eraser\" onClick={() => setColor('transparent')}>\n          <Backspace\n            sx={{\n              transform: isActive('transparent')\n                ? 'rotate(-45deg)'\n                : 'rotate(-90deg)',\n              transition: 'all 200ms ease-in',\n            }}\n          />\n        </Fab>\n      </Stack>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { styled, TextField } from '@mui/material'\nimport { useAppDispatch, useAppSelector } from '../../shared/store'\nimport { actions } from './slice'\n\nconst FieldStyled = styled(TextField)({\n  position: 'absolute',\n  top: '10%',\n  left: '20%',\n})\n\nexport default function NameEdit({\n  inputRef,\n  save,\n}: {\n  inputRef: React.RefObject<HTMLInputElement>\n  save: () => void\n}) {\n  const active = useAppSelector((state) => state.canvas?.active)\n  const dispatch = useAppDispatch()\n  const onNameChange = React.useCallback(\n    (e: { target: { value: string } }) => {\n      dispatch(actions.patchActive({ name: e.target.value }))\n    },\n    [dispatch]\n  )\n  const onKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      save()\n    }\n  }\n  return (\n    <FieldStyled\n      variant=\"standard\"\n      autoFocus={active.id === 'draft'}\n      accessKey=\"N\"\n      inputRef={inputRef}\n      value={active?.name || ''}\n      onChange={onNameChange}\n      key={`${active.id}-${active.createdAt}`}\n      onKeyUp={onKeyUp}\n    />\n  )\n}\n","import { Container, Slider, styled } from '@mui/material'\nimport config from '../../shared/config'\nimport { useAppDispatch, useAppSelector } from 'src/shared/store'\nimport { actions } from './slice'\n\nconst ContainerStyled = styled(Container)({\n  position: 'absolute',\n  bottom: '3%',\n  left: '20%',\n  width: '70%',\n})\n\nexport default function LineSize() {\n  const activeSize = useAppSelector((state) => state.canvas.size)\n  const dispatch = useAppDispatch()\n  const onSize = (e: Event, v: number | number[]) =>\n    dispatch(actions.patch({ size: v as number }))\n  return (\n    <ContainerStyled>\n      <Slider\n        value={activeSize || config.defaultLineSize}\n        onChange={onSize}\n        min={1}\n        max={100}\n        valueLabelDisplay=\"auto\"\n        title=\"Line size\"\n      />\n    </ContainerStyled>\n  )\n}\n","import React, { useRef, startTransition } from 'react'\nimport { DrawAction, ActionType, Drawing } from '@root/lib'\nimport { useAppDispatch, useAppSelector } from '../../shared/store'\nimport { getAsync, saveAsync } from './thunks'\nimport { Box, Container, Fab, Stack } from '@mui/material'\nimport LoadingCanvas from './LoadingCanvas'\nimport { actions } from './slice'\nimport Items from './Items'\nimport { generateThumbnail, getDraft } from './helpers'\nimport { Canvas } from './Canvas'\nimport Color from './Color'\nimport NameEdit from './NameEdit'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { Paths } from 'src/shared/routes'\nimport LineSize from './LineSize'\n\nexport default function CanvasControl() {\n  const dispatch = useAppDispatch()\n  const history = useAppSelector((state) => state.canvas?.active?.history)\n  const id = useAppSelector((state) => state.canvas?.active?.id)\n  const canvasRef = useRef<HTMLCanvasElement | null>(null)\n  const contextRef = useRef<CanvasRenderingContext2D | null>(null)\n  const buffer = useRef<DrawAction[]>([])\n  const bufferId = useRef<string | null>(null)\n  const nameRef = useRef<HTMLInputElement | null>(null)\n  const workerRef = useRef<Worker | null>(null)\n  const { id: paramId } = useParams()\n  const navigate = useNavigate()\n\n  const record = React.useCallback((t: ActionType, x?: number, y?: number) => {\n    const w = contextRef.current?.lineWidth\n    const c = contextRef.current?.strokeStyle as string\n    const ts = new Date().getTime()\n    buffer.current = [...buffer.current, { x, y, t, w, c, ts }]\n  }, [])\n\n  const clearCanvas = React.useCallback(() => {\n    const canvas = canvasRef.current\n    const context = canvas?.getContext('2d')\n    if (!canvas || !context) {\n      return\n    }\n    context.clearRect(0, 0, canvas.width, canvas.height)\n    buffer.current = []\n    bufferId.current = null\n    navigate(`${Paths.Draw}`, { replace: true })\n  }, [navigate])\n\n  const newHandler = React.useCallback(() => {\n    clearCanvas()\n    const active = getDraft()\n    dispatch(actions.patch({ active }))\n  }, [clearCanvas, dispatch])\n\n  const saveCanvas = React.useCallback(async () => {\n    const canvas = canvasRef.current\n    const context = canvas?.getContext('2d')\n    if (!canvas || !context) {\n      return\n    }\n\n    const payload = {\n      history: buffer.current,\n      thumbnail: await generateThumbnail(canvas),\n    }\n    await dispatch(saveAsync(payload))\n  }, [dispatch])\n\n  const renderHistory = React.useCallback(() => {\n    if (!canvasRef.current || !contextRef.current) {\n      return\n    }\n\n    //Lazy worker\n    if (!workerRef.current) {\n      const worker = new Worker(new URL('./worker.ts', import.meta.url))\n      worker.onmessage = (e) => {\n        if (!contextRef.current) {\n          // eslint-disable-next-line no-console\n          console.error('no context for result')\n        }\n        contextRef.current?.putImageData(e.data, 0, 0)\n        dispatch(actions.patch({ loading: false }))\n      }\n      workerRef.current = worker\n    }\n\n    //Worker rendering\n    dispatch(actions.patch({ loading: true }))\n\n    //Resizing, retina support\n    const { width, height } = canvasRef.current.getBoundingClientRect()\n    workerRef.current.postMessage({\n      buffer: buffer.current,\n      width,\n      height,\n      dpr: window.devicePixelRatio,\n    })\n  }, [dispatch])\n\n  /**\n   * onItemChanged\n   */\n  React.useEffect(() => {\n    if (id === 'draft') {\n      clearCanvas()\n      return\n    }\n\n    if (bufferId.current !== id) {\n      const savedDraft = bufferId.current === 'draft' && !!id && id !== 'draft'\n      bufferId.current = id as string\n      if (savedDraft) {\n        return\n      }\n      buffer.current = history\n    } else {\n      return\n    }\n\n    startTransition(() => {\n      renderHistory()\n    })\n  }, [id, history, renderHistory, clearCanvas])\n\n  React.useEffect(() => {\n    async function run() {\n      if (paramId && id !== paramId) {\n        const res = await dispatch(getAsync(paramId))\n        if ((res?.payload as Drawing)?.id === 'copy') {\n          navigate(`${Paths.Draw}`, { replace: true })\n        }\n      }\n    }\n    run()\n  }, [dispatch, id, navigate, paramId])\n\n  return (\n    <Container\n      maxWidth={false}\n      disableGutters\n      sx={{ display: 'flex', flexFlow: 'column' }}\n    >\n      <Canvas canvasRef={canvasRef} contextRef={contextRef} record={record} />\n      <NameEdit inputRef={nameRef} save={saveCanvas} />\n      <Box sx={{ position: 'absolute', top: '30%', right: '3%' }}>\n        <Color />\n        <Stack spacing={1} mt=\"1rem\">\n          <Fab color=\"secondary\" onClick={newHandler}>\n            New\n          </Fab>\n          <Fab color=\"secondary\" onClick={clearCanvas}>\n            Clear\n          </Fab>\n          <Fab color=\"secondary\" onClick={saveCanvas}>\n            Save\n          </Fab>\n        </Stack>\n      </Box>\n      <LineSize />\n      <LoadingCanvas />\n      <Items sx={{ mb: '1rem' }} />\n    </Container>\n  )\n}\n","import CanvasControl from '../features/canvas'\n\nexport default function Draw() {\n  return (\n    <div>\n      <CanvasControl />\n    </div>\n  )\n}\n","import { Entity, User } from '.'\n\nexport enum ActionType {\n  Open = 0,\n  Close = 1,\n  Stroke = 2,\n}\n\n/**\n * Reducing space as much as possible\n *\n * c: color\n * w: width/size\n * ts: unix timestamp\n */\n// better space would be, mini serializer needed\n// JSON.stringify([...Object.values({ x, y, t, w, st, ts })])\nexport interface DrawAction {\n  t: ActionType\n  x?: number\n  y?: number\n  c?: string\n  w?: number\n  ts?: number\n}\n\nexport interface Drawing extends Entity {\n  id?: string\n  userId?: string\n  name: string\n  history: DrawAction[]\n  thumbnail?: string\n  private?: boolean\n  user?: User\n}\n\n// might be better to add up all open closes hmm\nexport function getTimeSpent(d: Drawing): number {\n  if (d.history.length < 2) {\n    return 0\n  }\n  const first = d.history[0].ts as number\n  const last = d.history[d.history.length - 1].ts as number\n  const millisecs = last - first\n  return millisecs\n}\n\nexport function getDuration(d: Drawing) {\n  const secs = Math.round(getTimeSpent(d) / 1000)\n  const mins = Math.round(secs / 60)\n  const hours = Math.round(mins / 60)\n  const rem = secs % 60\n  return `${hours}h:${mins}m:${rem}s`\n}\n"],"names":["itemsAsync","createAsyncThunk","_","dispatch","get","resp","status","actions","items","data","loaded","getAsync","id","getState","state","userId","app","user","active","canvas","find","i","notifyError","item","getDraft","own","getCopy","saveAsync","history","thumbnail","payload","includes","undefined","request","response","notify","deleteAsync","Method","filter","LoadingCanvas","loading","useAppSelector","store","CircularProgress","className","sx","position","left","top","Items","props","activeId","useAppDispatch","navigate","useNavigate","setItem","useCallback","isActive","useParams","deleteItem","meta","requestStatus","Paths","replace","React","Container","maxWidth","Paper","variant","padding","ImageList","map","ImageListItem","border","borderWidth","transition","src","alt","name","style","backgroundColor","height","config","width","ImageListItemBar","title","actionIcon","Button","onClick","IconButton","Delete","Canvas","canvasRef","contextRef","record","color","size","isDrawing","draw","offsetX","offsetY","hist","current","lineTo","stroke","ActionType","startDrawing","beginPath","globalCompositeOperation","strokeStyle","lineWidth","cursor","finishDrawing","closePath","context","getContext","setBrushDefaults","adjustToResolution","handleResizing","window","addEventListener","removeEventListener","flex","onTouchStart","e","touches","length","clientX","clientY","onTouchMove","onTouchEnd","onMouseDown","nativeEvent","onMouseUp","onMouseMove","ref","colors","Color","activeColor","prev","setPrev","c","setColor","requested","Box","Stack","spacing","Fab","Check","Backspace","transform","FieldStyled","styled","TextField","NameEdit","inputRef","save","onNameChange","target","value","autoFocus","accessKey","onChange","onKeyUp","key","createdAt","ContainerStyled","bottom","LineSize","activeSize","Slider","v","min","max","valueLabelDisplay","CanvasControl","useRef","buffer","bufferId","nameRef","workerRef","paramId","t","x","y","w","ts","Date","getTime","clearCanvas","clearRect","newHandler","saveCanvas","generateThumbnail","renderHistory","worker","Worker","URL","onmessage","console","error","putImageData","getBoundingClientRect","postMessage","dpr","devicePixelRatio","savedDraft","startTransition","res","run","disableGutters","display","flexFlow","right","mt","mb","Draw","getDuration","d","secs","Math","round","first","getTimeSpent","mins","hours","rem"],"sourceRoot":""}